/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/city": {
    /**
     * Get Cities
     * @description Get cities
     */
    get: operations["getCities"];
    /**
     * Create a City
     * @description Create a city
     */
    post: operations["createCity"];
  };
  "/city/{id}": {
    /**
     * Get City
     * @description Get a city given an ID
     */
    get: operations["getCity"];
  };
  "/route": {
    /**
     * Get a Route
     * @description Get a route between two cities
     */
    get: operations["getRoute"];
    /**
     * Create a Route
     * @description Create a route between two cities with a given mileage
     */
    post: operations["createRoute"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** City */
    City: {
      /** @description City Identifier */
      id: string;
      /** @description Name of the city */
      name: string;
      /** @description The country which the city is in */
      country: string;
    };
    /**
     * Route
     * @description A route between two cities (`from` and `to`), with a distance of miles
     */
    Route: {
      /** @description A city identifier */
      from: string;
      /** @description A city identifier */
      to: string;
      /**
       * Format: int32
       * @description The distance in miles between the two cities
       */
      miles: number;
    };
    /** Error Model */
    ErrorModel: {
      status: number;
      message: string;
    };
    /** City */
    CityCreate: {
      /** @description Name of the city */
      name: string;
      /** @description The country which the city is in */
      country: string;
    };
  };
  responses: {
    /** @description Returns city result */
    CityGet: {
      content: {
        "application/json": components["schemas"]["City"];
      };
    };
    /** @description Returns cities result */
    CityAllGet: {
      content: {
        "application/json": components["schemas"]["City"][];
      };
    };
    /** @description Returns route result */
    RouteGet: {
      content: {
        "application/json": components["schemas"]["Route"];
      };
    };
    /** @description Returns route result */
    RouteCreated: {
      headers: {
        Location: components["headers"]["Location"];
      };
      content: {
        "application/json": components["schemas"]["Route"];
      };
    };
    ErrorResponse: components["responses"]["ErrorModel"];
    /** @description An error returned when the request is invalid */
    ErrorBadRequest: {
      content: {
        "application/json": {
          /** @enum {integer} */
          status: 400;
          message: string;
        };
      };
    };
    /** @description An error returned when the requested resource cannot be found */
    ErrorNotFound: {
      content: {
        "application/json": {
          /** @enum {integer} */
          status: 404;
          message: string;
        };
      };
    };
    /** @description An error returned when the requestor does not have access to the resource */
    ErrorUnauthorized: {
      content: {
        "application/json": {
          /** @enum {integer} */
          status: 401;
          message: string;
        };
      };
    };
    /** @description Error when there is a problem while fulfilling the request */
    ErrorModel: {
      content: {
        "application/json": components["schemas"]["ErrorModel"];
      };
    };
  };
  parameters: {
    /** @description City Identifier */
    PathCityID: string;
    /** @description City Identifier */
    QueryFrom: string;
    /** @description City Identifier */
    QueryTo: string;
  };
  requestBodies: {
    /** @description City creation request */
    CreateCity: {
      content: {
        "application/json": components["schemas"]["CityCreate"];
      };
    };
    /** @description Route creation request */
    CreateRoute: {
      content: {
        "application/json": components["schemas"]["Route"];
      };
    };
  };
  headers: {
    /** @description URI of the newly created resource */
    Location: string;
  };
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get Cities
   * @description Get cities
   */
  getCities: {
    responses: {
      200: components["responses"]["CityAllGet"];
      400: components["responses"]["ErrorBadRequest"];
      401: components["responses"]["ErrorUnauthorized"];
      default: components["responses"]["ErrorModel"];
    };
  };
  /**
   * Create a City
   * @description Create a city
   */
  createCity: {
    requestBody: components["requestBodies"]["CreateCity"];
    responses: {
      200: components["responses"]["CityGet"];
      400: components["responses"]["ErrorBadRequest"];
      401: components["responses"]["ErrorUnauthorized"];
      default: components["responses"]["ErrorModel"];
    };
  };
  /**
   * Get City
   * @description Get a city given an ID
   */
  getCity: {
    parameters: {
      path: {
        id: components["parameters"]["PathCityID"];
      };
    };
    responses: {
      200: components["responses"]["CityGet"];
      401: components["responses"]["ErrorUnauthorized"];
      404: components["responses"]["ErrorNotFound"];
      default: components["responses"]["ErrorModel"];
    };
  };
  /**
   * Get a Route
   * @description Get a route between two cities
   */
  getRoute: {
    parameters: {
      query: {
        from: components["parameters"]["QueryFrom"];
        to: components["parameters"]["QueryTo"];
      };
    };
    responses: {
      200: components["responses"]["RouteGet"];
      401: components["responses"]["ErrorUnauthorized"];
      404: components["responses"]["ErrorNotFound"];
      default: components["responses"]["ErrorModel"];
    };
  };
  /**
   * Create a Route
   * @description Create a route between two cities with a given mileage
   */
  createRoute: {
    requestBody: components["requestBodies"]["CreateRoute"];
    responses: {
      200: components["responses"]["RouteCreated"];
      400: components["responses"]["ErrorBadRequest"];
      401: components["responses"]["ErrorUnauthorized"];
      default: components["responses"]["ErrorModel"];
    };
  };
}
