openapi: 3.1.0
info:
  title: OpenAPI Demo
  version: 0.1.0
  description: Alex's OpenAPI Demo sandbox
  x-logo:
    url: logo.png
    altText: Alex's OpenAPI Demo
  contact:
    name: Alexander Broadbent
    url: https://abroadbent.com
    email: hello@abroadbent.com
  license:
    name: Apache 2.0
    identifier: Apache-2.0
servers:
  - url: http://localhost:8000/v1
    description: Local
tags:
  - name: Intro
    description: |
      Hello and welcome to my OpenAPI Demo.

      I'm going to use this API as an example of how to use OpenAPI with a variety of tools.
  - name: Health
    description: Check the health status of the server.
  - name: City
    description: |
      Cities are a representation of a city within a country,
paths:
  /city/{id}:
    get:
      tags:
        - City
      summary: Get City
      description: Get a city given an ID
      operationId: getCity
      security:
        - api_key:
            - city:get
      parameters:
        - $ref: '#/components/parameters/PathCityID'
      responses:
        '200':
          $ref: '#/components/responses/City'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/ErrorModel'
  /route:
    get:
      tags:
        - Route
      summary: Get a Route
      description: Get a route between two cities
      operationId: getRoute
      security:
        - api_key:
            - route:get
      parameters:
        - $ref: '#/components/parameters/QueryFrom'
        - $ref: '#/components/parameters/QueryTo'
      responses:
        '200':
          $ref: '#/components/responses/Route'
        '404':
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/ErrorModel'
  /_health:
    get:
      tags:
        - Health
      summary: Get Health Check Status
      description: Returns the health check for the service
      operationId: getHealthCheck
      security:
        - api_key:
            - health:get
      responses:
        '200':
          $ref: '#/components/responses/HealthCheck'
        '401':
          summary: Unauthorized
          $ref: '#/components/responses/ErrorModel'
        default:
          $ref: '#/components/responses/ErrorModel'
components:
  schemas:
    HealthCheckResult:
      title: Health Check Result
      type: object
      required:
        - ok
      properties:
        ok:
          type: boolean
    ErrorModel:
      title: Error Model
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: integer
          minimum: 100
          maximum: 600
        message:
          type: string
    City:
      title: City
      type: object
      required:
        - id
        - name
        - country
      properties:
        id:
          type: string
          description: City Identifier
        name:
          type: string
          description: Name of the city
        country:
          type: string
          description: The country which the city is in
      examples:
        - id: thurles
          name: Thurles
          country: Republic of Ireland
    Route:
      title: Route
      description: |
        A route between two cities (`from` and `to`), with a distance of miles
      type: object
      required:
        - from
        - to
        - miles
      properties:
        from:
          type: string
          description: A city identifier
        to:
          type: string
          description: A city identifier
        miles:
          type: integer
          format: int32
          description: The distance in miles between the two cities
      examples:
        - from: london
          to: milan
          miles: 819
  responses:
    GetCity:
      $ref: '#/components/responses/City'
    GetRoute:
      $ref: '#/components/responses/Route'
    GetHealthCheck:
      $ref: '#/components/responses/HealthCheck'
    ErrorResponse:
      $ref: '#/components/responses/ErrorModel'
    NotFoundError:
      description: An error returned when the requested resource cannot be found
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                title: Not Found Error
                type: object
                required:
                  - status
                  - message
                properties:
                  status:
                    type: integer
                    enum:
                      - 404
                  message:
                    type: string
                    enum:
                      - Not Found
    ErrorModel:
      description: Error when there is a problem while fulfilling the request
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/ErrorModel'
    City:
      description: Returns city result
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/City'
    Route:
      description: Returns route result
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/Route'
      links:
        getFromCity:
          operationId: getCity
          parameters:
            id: $response.body#/data/from
        getToCity:
          operationId: getCity
          parameters:
            id: $response.body#/data/to
    HealthCheck:
      description: Returns health check result
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                $ref: '#/components/schemas/HealthCheckResult'
  examples:
    CityThurles:
      summary: The city of Thurles in the Republic of Ireland
      value: '{"id": "thurles", "name": "Thurles", "country": "Republic of Ireland"}'
  parameters:
    PathCityID:
      in: path
      name: id
      schema:
        type: string
      required: true
      description: City Identifier
      example: paris
    QueryFrom:
      in: query
      name: to
      schema:
        type: string
      required: true
      description: City Identifier
      example: london
    QueryTo:
      in: query
      name: from
      schema:
        type: string
      required: true
      description: City Identifier
      example: milan
  securitySchemes:
    api_key:
      type: apiKey
      name: X-API-Key
      in: header
x-tagGroups:
  - name: Intro
    tags:
      - Intro
  - name: API
    tags:
      - Health
      - City
      - Route
