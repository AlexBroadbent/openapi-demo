---
openapi: 3.1.0

info:
  title: OpenAPI Demo
  version: 0.1.0
  description: Alex's OpenAPI Demo sandbox
  x-logo:
    url: logo.png
    altText: Alex's OpenAPI Demo
  contact:
    name: Alexander Broadbent
    url: https://abroadbent.com
    email: hello@abroadbent.com
  license:
    name: Apache 2.0
    identifier: Apache-2.0

servers:
  - url: http://localhost:8000/v1
    description: Local

x-tagGroups:
  - name: Intro
    tags:
      - Intro
  - name: API
    tags:
      - Health
      - City
      - Route

tags:
  - name: Intro
    description: |
      Hello and welcome to my OpenAPI Demo.

      I'm going to use this API as an example of how to use OpenAPI with a variety of tools.
  - name: Health
    description: Check the health status of the server.
  - name: City
    description: |
      Cities are a representation of a city within a country.
  - name: Route
    description: |
      A route is a distance, in miles, between two cities.

      *Note: The distance may be different depending on the direction from one city to the other.*

paths:
  "/city":
    get:
      tags:
        - City
      summary: Get Cities
      description: Get cities
      operationId: getCities
      security:
        - api_key:
            - city:read
      responses:
        "200":
          $ref: "#/components/responses/CityAllGet"
        "400":
          $ref: "#/components/responses/ErrorBadRequest"
        "401":
          $ref: "#/components/responses/ErrorUnauthorized"
        default:
          $ref: "#/components/responses/ErrorResponse"
    post:
      tags:
        - City
      summary: Create a City
      description: Create a city
      operationId: createCity
      x-internal: true
      security:
        - api_key:
            - city:create
      requestBody:
        $ref: "#/components/requestBodies/CreateCity"
      responses:
        "200":
          $ref: "#/components/responses/CityGet"
        "400":
          $ref: "#/components/responses/ErrorBadRequest"
        "401":
          $ref: "#/components/responses/ErrorUnauthorized"
        default:
          $ref: "#/components/responses/ErrorResponse"
  "/city/{id}":
    get:
      tags:
        - City
      summary: Get City
      description: Get a city given an ID
      operationId: getCity
      security:
        - api_key:
            - city:read
      parameters:
        - $ref: "#/components/parameters/PathCityID"
      responses:
        "200":
          $ref: "#/components/responses/CityGet"
        "401":
          $ref: "#/components/responses/ErrorUnauthorized"
        "404":
          $ref: "#/components/responses/ErrorNotFound"
        default:
          $ref: "#/components/responses/ErrorResponse"
  "/route":
    get:
      tags:
        - Route
      summary: Get a Route
      description: Get a route between two cities
      operationId: getRoute
      security:
        - api_key:
            - route:read
      parameters:
        - $ref: "#/components/parameters/QueryFrom"
        - $ref: "#/components/parameters/QueryTo"
      responses:
        "200":
          $ref: "#/components/responses/RouteGet"
        "401":
          $ref: "#/components/responses/ErrorUnauthorized"
        "404":
          $ref: "#/components/responses/ErrorNotFound"
        default:
          $ref: "#/components/responses/ErrorResponse"
    post:
      tags:
        - Route
      summary: Create a Route
      description: Create a route between two cities with a given milage
      operationId: createRoute
      x-internal: true
      security:
        - api_key:
            - route:create
      requestBody:
        $ref: "#/components/requestBodies/CreateRoute"
      responses:
        "200":
          $ref: "#/components/responses/RouteCreated"
        "400":
          $ref: "#/components/responses/ErrorBadRequest"
        "401":
          $ref: "#/components/responses/ErrorUnauthorized"
        default:
          $ref: "#/components/responses/ErrorResponse"
  "/_health":
    get:
      tags:
        - Health
      summary: Get Health Check Status
      description: Returns the health check for the service
      operationId: getHealthCheck
      security:
        - api_key:
            - health:read
      responses:
        "200":
          $ref: "#/components/responses/HealthCheckGet"
        "401":
          $ref: "#/components/responses/ErrorUnauthorized"
        default:
          $ref: "#/components/responses/ErrorResponse"

components:
  schemas:
    City:
      $ref: schemas/City.yml
    Route:
      $ref: schemas/Route.yml
    HealthCheck:
      $ref: schemas/HealthCheck.yml
    ErrorModel:
      $ref: schemas/ErrorModel.yml

  requestBodies:
    CreateCity:
      $ref: requestBodies/CreateCity.yml
    CreateRoute:
      $ref: requestBodies/CreateRoute.yml

  responses:
    CityGet:
      $ref: responses/CityGet.yml
    CityAllGet:
      $ref: responses/CityAllGet.yml
    RouteGet:
      $ref: responses/RouteGet.yml
    RouteCreated:
      $ref: responses/RouteCreated.yml
    HealthCheckGet:
      $ref: responses/HealthCheckGet.yml
    ErrorResponse:
      $ref: responses/ErrorModel.yml
    ErrorBadRequest:
      $ref: responses/ErrorBadRequest.yml
    ErrorNotFound:
      $ref: responses/ErrorNotFound.yml
    ErrorUnauthorized:
      $ref: responses/ErrorUnauthorized.yml

  examples:
    CityThurles:
      $ref: examples/ResponseCityThurles.yml
    RouteParisMilan:
      $ref: examples/ResponseRouteParisMilan.yml

  parameters:
    PathCityID:
      $ref: parameters/PathCityID.yml
    QueryFrom:
      $ref: parameters/QueryFrom.yml
    QueryTo:
      $ref: parameters/QueryTo.yml

  securitySchemes:
    api_key:
      $ref: securitySchemes/APIKey.yml
